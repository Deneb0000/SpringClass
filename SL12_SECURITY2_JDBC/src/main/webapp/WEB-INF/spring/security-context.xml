<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:security="http://www.springframework.org/schema/security"
   xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">
      																								<!-- 4.3으로 꼭 수정 -->
    																				<!-- 에러 : spring-security-4.2.xsd 수정. -->   
          
   <!-- css, js, image, static(정적) 등등   보안 필터 체인 X -->
   <security:http pattern="/static/**" security="none"></security:http>   
   <security:http pattern="/design/**" security="none"></security:http>
   <security:http pattern="/css/**" security="none"></security:http>
   <security:http pattern="/js/**" security="none"></security:http>
   
   <security:http use-expressions="true"> 
   
   	  <security:intercept-url pattern="/customer/noticeReg.htm" access="isAuthenticated()"/>
      <security:intercept-url pattern="/customer/noticeDel.htm" access="hasRole('ROLE_ADMIN')"/>
      <security:intercept-url pattern="/**" access="permitAll" />
      
      <!-- 우리가 만든 로그인페이지 연결 : /joinus/login.htm -->
      <!-- login-page="/joinus/login.htm" +GET -->
      <security:form-login login-page="/joinus/login.htm"
      default-target-url="/index.htm"
      authentication-failure-forward-url="/joinus/login.htm?error=true"
      authentication-success-handler-ref="customLoginSuccessHandler"/>  
      
      <!-- hong 인증 -> 삭제버튼 403 접근 금지 오류 : 특징 URL 이동 -->
      <!-- <security:access-denied-handler error-page="/common/accessError.htm"/> -->
      <!-- hong 인증 -> 삭제버튼 403 접근 금지 오류 : 특징 URL 이동x 직접 개발자가 고현한 클래스 객체를 호출 -->
      <security:access-denied-handler ref="customAccessDeniedHandler"/>
      
      <security:logout logout-url="/joinus/logout.htm"
		invalidate-session="true"
		logout-success-url="/"/>
      
      
   </security:http>   
   <!-- PasswordEncoder -->
   <bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
   <!-- 스프링 시큐리티 5버전부터는, 반드시 PasswordEncoder를 이용하여 비밀번호를 변경/저장 처리를 해야함. password 앞에 {noop} 을 넣어준다. -->
   <!-- 인증 관리자 : 총괄책임자 -->
   <security:authentication-manager>
   		<!-- 인증제공자 : 실무자 --> 
   		<!-- <security:authentication-provider>
   			유저정보를 메모리에 저장 (DB저장하는거 아님)
	   		<security:user-service>
	   			유저 목록
	   			<security:user name="hong" authorities="ROLE_USER"  password="{noop}1234"/>
	         	<security:user name="admin" authorities="ROLE_USER, ROLE_MANAGER, ROLE_ADMIN" password="{noop}1234"/>
	   		</security:user-service>
   		</security:authentication-provider> -->
   		
   		
   		<!-- JDBC 사용해서 인증처리를 하겠다. -->
   		<security:authentication-provider>
   			<security:jdbc-user-service data-source-ref="dataSource"
   			users-by-username-query=" SELECT id, pwd AS PASSWORD, 1 as enabled FROM member WHERE id = ? "
   			authorities-by-username-query=" SELECT username, authority FROM member_authorities WHERE username = ? "/>
   		<security:password-encoder ref="bCryptPasswordEncoder"/>
   		</security:authentication-provider>
   </security:authentication-manager>

</beans>